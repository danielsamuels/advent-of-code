import pytest

from year_2022.day_9 import run_step_1, run_simulation

test_data = """
R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2
""".strip()

test_data_positions = [
    [(1, 0), (0, 0)],  # R 4
    [(2, 0), (1, 0)],
    [(3, 0), (2, 0)],
    [(4, 0), (3, 0)],
    [(4, -1), (3, 0)],  # U 4
    [(4, -2), (4, -1)],
    [(4, -3), (4, -2)],
    [(4, -4), (4, -3)],
    [(3, -4), (4, -3)],  # L 3
    [(2, -4), (3, -4)],
    [(1, -4), (2, -4)],
    [(1, -3), (2, -4)],  # D 1
    [(2, -3), (2, -4)],  # R 4
    [(3, -3), (2, -4)],
    [(4, -3), (3, -3)],
    [(5, -3), (4, -3)],
    [(5, -2), (4, -3)],  # D 1
    [(4, -2), (4, -3)],  # L 5
    [(3, -2), (4, -3)],
    [(2, -2), (3, -2)],
    [(1, -2), (2, -2)],
    [(0, -2), (1, -2)],
    [(1, -2), (1, -2)],  # R 2
    [(2, -2), (1, -2)],
]


# Expectation does not include the starting position of 0,0, 0,0
@pytest.mark.parametrize('commands, expectation', [
    # Single direction moves
    ('U 3', [
        [(0, -1), (0, 0)],
        [(0, -2), (0, -1)],
        [(0, -3), (0, -2)],
    ]),
    ('D 3', [
        [(0, 1), (0, 0)],
        [(0, 2), (0, 1)],
        [(0, 3), (0, 2)],
    ]),
    ('L 3', [
        [(-1, 0), (0, 0)],
        [(-2, 0), (-1, 0)],
        [(-3, 0), (-2, 0)],
    ]),
    ('R 3', [
        [(1, 0), (0, 0)],
        [(2, 0), (1, 0)],
        [(3, 0), (2, 0)],
    ]),
    # Combinations that feature diagonals
    ('R 2\nU 2', [
        [(1, 0), (0, 0)],
        [(2, 0), (1, 0)],
        [(2, -1), (1, 0)],
        [(2, -2), (2, -1)],
    ]),
    ('R 1\nD 1\nL 2\nU 2\nR 2\nD 1\nL 1', [
        [(1, 0), (0, 0)],  # R 1
        [(1, 1), (0, 0)],  # D 1
        [(0, 1), (0, 0)],  # L 2
        [(-1, 1), (0, 0)],
        [(-1, 0), (0, 0)],  # U 2
        [(-1, -1), (0, 0)],
        [(0, -1), (0, 0)],  # R 2
        [(1, -1), (0, 0)],
        [(1, 0), (0, 0)],  # D 1
        [(0, 0), (0, 0)],  # L 1
    ]),
    # Combinations that cause overlaps
    ('L 2\nR 2', [
        [(-1, 0), (0, 0)],
        [(-2, 0), (-1, 0)],
        [(-1, 0), (-1, 0)],
        [(0, 0), (-1, 0)],
    ]),
    # The test data
    (test_data, test_data_positions),
])
def test_run_simulation_2_knots(commands, expectation):
    expected_expectation_count = sum([
        int(command.split(' ')[1])
        for command in commands.split('\n')
    ])
    assert len(expectation) == expected_expectation_count
    assert run_simulation(commands, 2) == [
        [(0, 0), (0, 0)],
        *expectation,
    ]


def test_run_simulation_10_knots():
    expectation: list[list[
        tuple[int, int],
        tuple[int, int],
        tuple[int, int],
        tuple[int, int],
        tuple[int, int],
        tuple[int, int],
        tuple[int, int],
        tuple[int, int],
        tuple[int, int],
        tuple[int, int],
    ]] = [
        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
        # R 4
        [(1, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(2, 0), (1, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(3, 0), (2, 0), (1, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(4, 0), (3, 0), (2, 0), (1, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
        # U 4
        [(4, -1), (3, 0), (2, 0), (1, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(4, -2), (4, -1), (3, -1), (2, -1), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(4, -3), (4, -2), (3, -1), (2, -1), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(4, -4), (4, -3), (4, -2), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        # L 3
        [(3, -4), (4, -3), (4, -2), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(2, -4), (3, -4), (3, -3), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(1, -4), (2, -4), (3, -3), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        # D 1
        [(1, -3), (2, -4), (3, -3), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        # R 4
        [(2, -3), (2, -4), (3, -3), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(3, -3), (2, -4), (3, -3), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(4, -3), (3, -3), (3, -3), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(5, -3), (4, -3), (3, -3), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        # D 1
        [(5, -2), (4, -3), (3, -3), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        # L 5
        [(4, -2), (4, -3), (3, -3), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(3, -2), (4, -3), (3, -3), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(2, -2), (3, -2), (3, -3), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(1, -2), (2, -2), (3, -3), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(0, -2), (1, -2), (2, -2), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        # R 2
        [(1, -2), (1, -2), (2, -2), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(2, -2), (1, -2), (2, -2), (3, -2), (2, -2), (1, -1), (0, 0), (0, 0), (0, 0), (0, 0)],
    ]
    assert run_simulation(test_data, 10) == expectation


def test_run_step_1():
    assert run_step_1(test_data) == 13
